// Code generated by MockGen. DO NOT EDIT.
// Source: ./jkafka_reader.go

// Package mockjkafka is a generated GoMock package.
package mockjkafka

import (
	context "context"
	reflect "reflect"
	sync "sync"

	gomock "github.com/golang/mock/gomock"
	kafka_go "github.com/segmentio/kafka-go"
)

// MockKafkaReader is a mock of KafkaReader interface.
type MockKafkaReader struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaReaderMockRecorder
}

// MockKafkaReaderMockRecorder is the mock recorder for MockKafkaReader.
type MockKafkaReaderMockRecorder struct {
	mock *MockKafkaReader
}

// NewMockKafkaReader creates a new mock instance.
func NewMockKafkaReader(ctrl *gomock.Controller) *MockKafkaReader {
	mock := &MockKafkaReader{ctrl: ctrl}
	mock.recorder = &MockKafkaReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaReader) EXPECT() *MockKafkaReaderMockRecorder {
	return m.recorder
}

// ReadMessageAsync mocks base method.
func (m *MockKafkaReader) ReadMessageAsync(ctx context.Context, ch chan<- kafka_go.Message, errch chan<- error, wg *sync.WaitGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReadMessageAsync", ctx, ch, errch, wg)
}

// ReadMessageAsync indicates an expected call of ReadMessageAsync.
func (mr *MockKafkaReaderMockRecorder) ReadMessageAsync(ctx, ch, errch, wg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessageAsync", reflect.TypeOf((*MockKafkaReader)(nil).ReadMessageAsync), ctx, ch, errch, wg)
}
