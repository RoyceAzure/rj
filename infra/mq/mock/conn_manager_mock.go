// Code generated by MockGen. DO NOT EDIT.
// Source: ./conn_manager.go

// Package mockmq is a generated GoMock package.
package mockmq

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	amqp091_go "github.com/rabbitmq/amqp091-go"
)

// MockIMQConnManager is a mock of IMQConnManager interface.
type MockIMQConnManager struct {
	ctrl     *gomock.Controller
	recorder *MockIMQConnManagerMockRecorder
}

// MockIMQConnManagerMockRecorder is the mock recorder for MockIMQConnManager.
type MockIMQConnManagerMockRecorder struct {
	mock *MockIMQConnManager
}

// NewMockIMQConnManager creates a new mock instance.
func NewMockIMQConnManager(ctrl *gomock.Controller) *MockIMQConnManager {
	mock := &MockIMQConnManager{ctrl: ctrl}
	mock.recorder = &MockIMQConnManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMQConnManager) EXPECT() *MockIMQConnManagerMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockIMQConnManager) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockIMQConnManagerMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockIMQConnManager)(nil).Connect))
}

// GetChannel mocks base method.
func (m *MockIMQConnManager) GetChannel(channelId int) (*amqp091_go.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel", channelId)
	ret0, _ := ret[0].(*amqp091_go.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannel indicates an expected call of GetChannel.
func (mr *MockIMQConnManagerMockRecorder) GetChannel(channelId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockIMQConnManager)(nil).GetChannel), channelId)
}

// RegisterChannel mocks base method.
func (m *MockIMQConnManager) RegisterChannel() (int, *amqp091_go.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterChannel")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*amqp091_go.Channel)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RegisterChannel indicates an expected call of RegisterChannel.
func (mr *MockIMQConnManagerMockRecorder) RegisterChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterChannel", reflect.TypeOf((*MockIMQConnManager)(nil).RegisterChannel))
}

// ReleaseChannel mocks base method.
func (m *MockIMQConnManager) ReleaseChannel(channelId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseChannel", channelId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseChannel indicates an expected call of ReleaseChannel.
func (mr *MockIMQConnManagerMockRecorder) ReleaseChannel(channelId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseChannel", reflect.TypeOf((*MockIMQConnManager)(nil).ReleaseChannel), channelId)
}
