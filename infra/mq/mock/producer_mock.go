// Code generated by MockGen. DO NOT EDIT.
// Source: ./producer.go

// Package mockmq is a generated GoMock package.
package mockmq

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIProducer is a mock of IProducer interface.
type MockIProducer struct {
	ctrl     *gomock.Controller
	recorder *MockIProducerMockRecorder
}

// MockIProducerMockRecorder is the mock recorder for MockIProducer.
type MockIProducerMockRecorder struct {
	mock *MockIProducer
}

// NewMockIProducer creates a new mock instance.
func NewMockIProducer(ctrl *gomock.Controller) *MockIProducer {
	mock := &MockIProducer{ctrl: ctrl}
	mock.recorder = &MockIProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProducer) EXPECT() *MockIProducerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIProducer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIProducer)(nil).Close))
}

// Publish mocks base method.
func (m *MockIProducer) Publish(exchange, routingKey string, message []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", exchange, routingKey, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockIProducerMockRecorder) Publish(exchange, routingKey, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockIProducer)(nil).Publish), exchange, routingKey, message)
}
