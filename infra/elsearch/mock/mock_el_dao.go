// Code generated by MockGen. DO NOT EDIT.
// Source: pkg\elsearch\el_dao.go

// Package mock_el is a generated GoMock package.
package mock_el

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	elastic "github.com/olivere/elastic/v7"
)

// MockIElSearchDao is a mock of IElSearchDao interface.
type MockIElSearchDao struct {
	ctrl     *gomock.Controller
	recorder *MockIElSearchDaoMockRecorder
}

// MockIElSearchDaoMockRecorder is the mock recorder for MockIElSearchDao.
type MockIElSearchDaoMockRecorder struct {
	mock *MockIElSearchDao
}

// NewMockIElSearchDao creates a new mock instance.
func NewMockIElSearchDao(ctrl *gomock.Controller) *MockIElSearchDao {
	mock := &MockIElSearchDao{ctrl: ctrl}
	mock.recorder = &MockIElSearchDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIElSearchDao) EXPECT() *MockIElSearchDaoMockRecorder {
	return m.recorder
}

// BatchInsert mocks base method.
func (m *MockIElSearchDao) BatchInsert(index string, documents []map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchInsert", index, documents)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchInsert indicates an expected call of BatchInsert.
func (mr *MockIElSearchDaoMockRecorder) BatchInsert(index, documents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchInsert", reflect.TypeOf((*MockIElSearchDao)(nil).BatchInsert), index, documents)
}

// Close mocks base method.
func (m *MockIElSearchDao) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIElSearchDaoMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIElSearchDao)(nil).Close))
}

// Create mocks base method.
func (m *MockIElSearchDao) Create(index string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", index, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIElSearchDaoMockRecorder) Create(index, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIElSearchDao)(nil).Create), index, data)
}

// Delete mocks base method.
func (m *MockIElSearchDao) Delete(index, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", index, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIElSearchDaoMockRecorder) Delete(index, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIElSearchDao)(nil).Delete), index, id)
}

// Read mocks base method.
func (m *MockIElSearchDao) Read(index, id string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", index, id)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockIElSearchDaoMockRecorder) Read(index, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockIElSearchDao)(nil).Read), index, id)
}

// Search mocks base method.
func (m *MockIElSearchDao) Search(index string, query elastic.Query) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", index, query)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockIElSearchDaoMockRecorder) Search(index, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockIElSearchDao)(nil).Search), index, query)
}

// Update mocks base method.
func (m *MockIElSearchDao) Update(index, id string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", index, id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIElSearchDaoMockRecorder) Update(index, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIElSearchDao)(nil).Update), index, id, data)
}
