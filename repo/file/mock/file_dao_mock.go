// Code generated by MockGen. DO NOT EDIT.
// Source: ./file_dao.go

// Package mockfile is a generated GoMock package.
package mockfile

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileDAO is a mock of FileDAO interface.
type MockFileDAO struct {
	ctrl     *gomock.Controller
	recorder *MockFileDAOMockRecorder
}

// MockFileDAOMockRecorder is the mock recorder for MockFileDAO.
type MockFileDAOMockRecorder struct {
	mock *MockFileDAO
}

// NewMockFileDAO creates a new mock instance.
func NewMockFileDAO(ctrl *gomock.Controller) *MockFileDAO {
	mock := &MockFileDAO{ctrl: ctrl}
	mock.recorder = &MockFileDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileDAO) EXPECT() *MockFileDAOMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockFileDAO) Append(content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", content)
	ret0, _ := ret[0].(error)
	return ret0
}

// Append indicates an expected call of Append.
func (mr *MockFileDAOMockRecorder) Append(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockFileDAO)(nil).Append), content)
}

// Clear mocks base method.
func (m *MockFileDAO) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockFileDAOMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockFileDAO)(nil).Clear))
}

// Close mocks base method.
func (m *MockFileDAO) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockFileDAOMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFileDAO)(nil).Close))
}

// Read mocks base method.
func (m *MockFileDAO) Read() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockFileDAOMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFileDAO)(nil).Read))
}

// Write mocks base method.
func (m *MockFileDAO) Write(content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", content)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockFileDAOMockRecorder) Write(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockFileDAO)(nil).Write), content)
}
