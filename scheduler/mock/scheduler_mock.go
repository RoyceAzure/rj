// Code generated by MockGen. DO NOT EDIT.
// Source: ./scheduler.go

// Package mockscheduler is a generated GoMock package.
package mockscheduler

import (
	reflect "reflect"

	scheduler "github.com/RoyceAzure/rj/scheduler"
	gomock "github.com/golang/mock/gomock"
)

// MockISchedulerTask is a mock of ISchedulerTask interface.
type MockISchedulerTask struct {
	ctrl     *gomock.Controller
	recorder *MockISchedulerTaskMockRecorder
}

// MockISchedulerTaskMockRecorder is the mock recorder for MockISchedulerTask.
type MockISchedulerTaskMockRecorder struct {
	mock *MockISchedulerTask
}

// NewMockISchedulerTask creates a new mock instance.
func NewMockISchedulerTask(ctrl *gomock.Controller) *MockISchedulerTask {
	mock := &MockISchedulerTask{ctrl: ctrl}
	mock.recorder = &MockISchedulerTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISchedulerTask) EXPECT() *MockISchedulerTaskMockRecorder {
	return m.recorder
}

// GetStatus mocks base method.
func (m *MockISchedulerTask) GetStatus() *scheduler.SchedulerTaskStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(*scheduler.SchedulerTaskStatus)
	return ret0
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockISchedulerTaskMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockISchedulerTask)(nil).GetStatus))
}

// RunSchedulerTask mocks base method.
func (m *MockISchedulerTask) RunSchedulerTask() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunSchedulerTask")
}

// RunSchedulerTask indicates an expected call of RunSchedulerTask.
func (mr *MockISchedulerTaskMockRecorder) RunSchedulerTask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSchedulerTask", reflect.TypeOf((*MockISchedulerTask)(nil).RunSchedulerTask))
}

// SetStatus mocks base method.
func (m *MockISchedulerTask) SetStatus(arg0 *scheduler.SchedulerTaskStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatus", arg0)
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockISchedulerTaskMockRecorder) SetStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockISchedulerTask)(nil).SetStatus), arg0)
}

// MockIScheduler is a mock of IScheduler interface.
type MockIScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockISchedulerMockRecorder
}

// MockISchedulerMockRecorder is the mock recorder for MockIScheduler.
type MockISchedulerMockRecorder struct {
	mock *MockIScheduler
}

// NewMockIScheduler creates a new mock instance.
func NewMockIScheduler(ctrl *gomock.Controller) *MockIScheduler {
	mock := &MockIScheduler{ctrl: ctrl}
	mock.recorder = &MockISchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIScheduler) EXPECT() *MockISchedulerMockRecorder {
	return m.recorder
}

// AddTask mocks base method.
func (m *MockIScheduler) AddTask(time string, task scheduler.ISchedulerTask) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTask", time, task)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTask indicates an expected call of AddTask.
func (mr *MockISchedulerMockRecorder) AddTask(time, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockIScheduler)(nil).AddTask), time, task)
}

// RemoveTask mocks base method.
func (m *MockIScheduler) RemoveTask(taskId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTask", taskId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTask indicates an expected call of RemoveTask.
func (mr *MockISchedulerMockRecorder) RemoveTask(taskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTask", reflect.TypeOf((*MockIScheduler)(nil).RemoveTask), taskId)
}

// Start mocks base method.
func (m *MockIScheduler) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockISchedulerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIScheduler)(nil).Start))
}

// Stop mocks base method.
func (m *MockIScheduler) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockISchedulerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIScheduler)(nil).Stop))
}

// UpdateTask mocks base method.
func (m *MockIScheduler) UpdateTask(taskId int, time string, task scheduler.ISchedulerTask) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", taskId, time, task)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockISchedulerMockRecorder) UpdateTask(taskId, time, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockIScheduler)(nil).UpdateTask), taskId, time, task)
}
